%% 5 Nov 2012 (DH frames assigned as in lecture slides 09_DirectKinematics, A. De Luca)
clear all
clc

%% Define symbolic variables

syms alpha d a theta

%% number of joints of SCARA

N=4;
syms q_1 q_2 q_3 q_4 q_5

%% Insert DH table of parameters of SCARA
DHTABLE = [ M_PI/2,     0,     0, q_1;
        0,  21/2,     0, q_2;
        0,    10,     0, q_3;
    -M_PI/2, 27/10,     0, q_4;
        0,     0, 33/10, q_5;]

%DHTABLE = [  0   sym('a1') 0 sym('q1') ;
 %            0   sym('a2')    0      sym('q2');
  %           0    sym('a3')   0    sym('q3')    ;]
DHTABLE = [  pi/2   sym('B') sym('A') sym('q1') ;
             0   sym('C')    0      sym('q2');
             pi/2    sym('D')   0    sym('q3')   ;
             0 0 sym('q4') 0;]
           
% DHTABLE = [  pi/2   0.3 0 pi/2;
 %            0   1    2      -pi/4;]
            
 
 %  DHTABLE = [  -pi/2   0   128       0;
 %               0   -612.7    0     pi/2;
 %               pi     571.6       0    pi;
 %               pi/2    0   163.9   -pi/2
 %               -pi/2   0   -115.7  0
 %               0   0   92.2    0
 %               ];
             

         
%% Build the general Denavit-Hartenberg trasformation matrix

TDH = [ cos(theta) -sin(theta)*cos(alpha)  sin(theta)*sin(alpha) a*cos(theta);
        sin(theta)  cos(theta)*cos(alpha) -cos(theta)*sin(alpha) a*sin(theta);
          0             sin(alpha)             cos(alpha)            d;
          0               0                      0                   1];

%% Build transformation matrices for each link
% First, we create an empty cell array

A = cell(1,N);

% For every row in 'DHTABLE' we substitute the right value inside
% the general DH matrix

for i = 1:N
    alpha = DHTABLE(i,1);
    a = DHTABLE(i,2);
    d = DHTABLE(i,3);
    theta = DHTABLE(i,4);
    A{i} = subs(TDH);
end

%% Direct kinematics

disp('Direct kinematics of SCARA robot in symbolic form (simplifications may need some time)')

disp(['Number of joints N=',num2str(N)])

% Note: 'simplify' may need some time

T = eye(4);

for i=1:N 
    T = T*A{i};
    T = simplify(T);
end

% output TN matrix

T0N = T

% output ON position

p = T(1:3,4)

% output xN axis

n=T(1:3,1)

% output yN axis

s=T(1:3,2)

% output zN axis

a=T(1:3,3)